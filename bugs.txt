1) can't immediately turn right after turning left after turning right and vice versa (fixed)
2) apple respawn code runs multiple times


(code for scaly snek)
import turtle
import time
import random
wn = turtle.Screen()
wn.bgcolor("white")
mypen = turtle.Turtle()
mypen.color("black")
mypen.penup()
mypen.setposition(-470,-450)
mypen.pendown()
mypen.pensize(3)
for side in range(4):
    mypen.forward(940)
    mypen.left(90)
mypen.hideturtle()
apeat= 0
apple = turtle.Turtle()
apple.penup()
apple.shape("turtle")
apple.fillcolor("red")
snake = turtle.Turtle()
snake.color("darkgreen")
snake.pensize(5)
snake.speed(0)
snake.hideturtle()
snaketail = turtle.Turtle()
snaketail.color("white")
snaketail.pensize(5)
snaketail.speed(0)
snaketail.hideturtle()
w = 0
z = 0
coords = []
leftRightTurns = []
turns = 0
speed = 2
tailspeed = 1
ateApple = False
turnedLeft = False
turnedRight = False
lastTurn = ""
leftTurns = 0
rightTurns = 0
applereset = 0
def addspeed():
    global tailspeed
    tailspeed = 2
def resetcoords():
    global x
    x = snake.xcor()
    global y
    y = snake.ycor()
    coords.append([])
    coords[turns - 1].append(x)
    coords[turns - 1].append(y)
def addLeft():
    leftRightTurns[turns - 1].append("left")
def resetcOrds():
    global applereset
    applereset += 1
    global apeat
    apeat+=1
    ateApple = True
    apple.hideturtle()
    global w
    w = apple.xcor()
    global z
    z = apple.ycor()
    apple.goto(random.randint(-400, 400), random.randint(-400, 400))
    apple.showturtle()
resetcOrds()
applereset = 0
def boundary_check_snake():
    if snake.xcor() > 500 or snake.xcor() < -500: 
        snake.right(180)
        snaketail.goto(snake.xcor(), snake.ycor())
        snaketail.right(180)
    if snake.ycor() > 400 or snake.ycor() < -400:
        snake.right(180)
        snaketail.goto(snake.xcor(), snake.ycor())
        snaketail.right(180)
def left():
    print("snek turned left")
    global turnedLeft
    global turns
    global leftTurns
    global lastTurn
    turns += 1
    snake.left(90)
    resetcoords()
    turnedLeft = True
    leftTurns += 1
    print("left funct", turnedLeft)
    if turnedRight == True or rightTurns > 0:
        lastTurn = "right"
def right():
    print("snek turned right")
    global turnedRight
    global turns
    global rightTurns
    global lastTurn
    turns += 1
    snake.right(90)
    resetcoords()
    turnedRight = True
    rightTurns += 1
    print("right funct", turnedRight)
    if turnedLeft == True or leftTurns > 0:
        lastTurn = "left"
turtle.listen()
turtle.onkey(left, "Left")
turtle.onkey(right, "Right")
def followLeft():
    global leftTurns
    global tailspeed
    global turnedLeft
    snaketail.left(90)
    addspeed()
    tailspeed = speed
    turnedLeft = False
    leftTurns -= 1
    print("left")
def followRight():
    global rightTurns
    global tailspeed
    global turnedRight
    snaketail.right(90)
    addspeed()
    tailspeed = speed
    turnedRight = False
    rightTurns -= 1
    print("right")
while True:
    snake.forward(speed)
    snaketail.forward(tailspeed)
    boundary_check_snake()
##    print(speed)
##    print("tail", tailspeed)
##    print("turns", turns)
##    print("coords list", coords)
##    print("snake coords", snake.xcor(), snake.ycor()) 
##    print("snaketail coords", snaketail.xcor(), snaketail.ycor())
##    print("apple coords", apple.xcor(), apple.ycor()) 
##    print("\n")
    x = snake.xcor()
    y = snake.ycor()
    w = apple.xcor()
    z = apple.ycor()
    for x in range(turns):
        #print(x)
        if (snaketail.xcor() == coords[x][0]) and (snaketail.ycor() == coords[x][1]):
##            print("ran")
##            print("turnedLeft", turnedLeft)
##            print("turnedRight", turnedRight)
##            print("left turns", leftTurns)
##            print("right turns", rightTurns)
##            print("lastTurn", lastTurn)
            if lastTurn == "right":
                followRight()
                lastTurn = ""
            if lastTurn == "left":
                followLeft()
                lastTurn = ""
            else:
                if (turnedLeft == True) or (leftTurns > 0):
                    followLeft()
                if (turnedRight == True) or (rightTurns > 0):
                    followRight()
    if applereset == 0:
        for i in range (int(w) - 5, int(w) + 5):
            #print(applereset)
            if (i > snake.xcor() - 5) and (i < snake.xcor() + 5):
                #print("i", i)
                #print(snake.xcor())
                for j in range (int(z) - 5, int(z) + 5):
                    if (j > snake.ycor() - 5) and (j < snake.ycor() + 5):
                        #print("j", j)
                        resetcOrds()
                        #print("apple reset", applereset)
    if ateApple == True:
            applereset = 0
            oldspeed = speed
            speed = oldspeed + 0.5
            ateApple = False                                 

apple.listen()

#-------------------------------------debug code-------------------------------
##    print("turns", turns)
##    print("coords list", coords)
##    print("snake coords", snake.xcor(), snake.ycor()) 
##    print("snaketail coords", snaketail.xcor(), snaketail.ycor())
##    print("\n")

turn left, have snake go up